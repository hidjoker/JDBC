package singleton;

//+ 디자인 패턴, Design Pattern
//	- 설계 상 발생하는 문제(issue)에 대한 해답을 문서화한 것
//	- 프로그램 개발 하면서 자주 마주치는 상황(문제점)을 해결하기
//	위한 설계 노하우를 적용시킨 형태
//	- 잘 알려진 알고리즘
//+ Singleton 패턴
//	- 객체를 여러번 생성(생성자 여러번 호출)하더라도 하나의 인스턴스가
//	유지되도록 고안한 패턴
//	- 최초 객체생성(인스턴스화) 이후 생성자를 호출해도 최초에 만들어진 
//	인스턴스를 반환하도록 설계한다
//	- 싱글톤 패턴 적용 위치
//		리소스 많이 먹는 자원을 로드할 때 (DB Connection)
//		어플리케이션에서 계속해서 사용하는 자원을 로드할 때
//		-> 드라이버 로드
//		-> OJDBC 드라이버 로드
//		-> 로그 객체(Logger Class)
//+ 싱글톤 패턴의 장점
//	- 두 번째 이후부터 객체를 로딩 시간이 매우 빨라짐
//	- 인스턴스가 프로그램 실행 중에 절대적으로 한 개만 존재한다
//+ 싱글톤 패턴의 단점
//	- 싱글톤 인스턴스가 너무 많은 곳에서 사용되거나 너무 많은 데이터를 공유해주는 경우 인스턴스 간 결합도가 높아짐
//	** 개방 - 폐쇄 원칙(=> 객체지향 설계 원칙)
//		응집도는 높이고
//		결합도는 낮춘다


//단점.
//1. 인스턴스화하면서 추가 작업을 할 수 없음
//	 (예외처리 불가)
//2. 인스턴스를 사용하지 않더라도 생성해 놓는다

public class Singleton_01 {
	
	public String data = "Apple";

	private static Singleton_01 instance = new Singleton_01();
	
	private Singleton_01() { } // 외부에서 객체 생성 불가
	
	public static Singleton_01 getInstance() {
		return instance;
	}
		
}
